--- Pengantar Studi Kasus Regex

Goals :
Mempertahankan kualitas data perusahaan
Memastikan data telah ‘bersih’ juga ready to use for users.  

Problem:
Banyak variasi kesalahan
Kesalahan penulisan / ketidakseragaman pada raw data yang lebih banyak datanya
Sampel data pencatatan pada suatu basis data dengan format free text
Banyak data yang tidak terstandarisasi dan formatnya berantakan / banyak typing of error (typo)

Solution :
Merapikan format data teks / string pada data dengan notasi regular expression (regex)

Result : 
Tidak perlu merapikan satu-satu data teks
Mengefisiensi waktu pengerjaan

+---------------+---------------+-----------+---------------+---------------+
| no_pencatatan | tanggal_catat | kota      | jumlah_member | stat_pencatat |
+---------------+---------------+-----------+---------------+---------------+
|       1       | 01-05-2020    | Jakarta   | 1311          | Andra         |
|       2       | 30-06-2020    | Jakarta   | 1205          | Andra         |
|       3       | 05/02/2020    | Bandung   | 500           | Antara        |
|       4       | 06/28/2020    | Bandung   | 670           | Antara        |
|       5       | 05/10/2020    | Semarang  | 8             | Senja         |
|       6       | 06/28/2020    | Semarang  | 12            | Sendja        |
+---------------+---------------+-----------+---------------+---------------+

--- Pengantar Regular Expression
data pada tabel master_pelanggan
hanya mengambil kolom id_pelanggan dan provinsi dari pelanggan yang berasal dari provinsi Yogyakarta. 

+---------------+---------------+
| id_pelanggan  | provinsi      | 
+---------------+---------------+
|       1       | Yogyakarta    | 
|       2       | Jogja         | 
|       3       | Jogjakarta    | 
|       4       | YogYa         | 
|       5       | D.I Yogyakarta|
+---------------+---------------+

Provinsi yang dimaksud sebenarnya sama yakni ‘Yogyakarta’
Karena mempunyai format free text sehingga pelanggan bebas menginputkan provinsi asalnya. 
untuk kebutuhan proses analisa data (Cth : agregasi) harus diseragamkan atau distandarisasi.
Jika pengkondisian query dengan case – when (query pengkondisian)

---  Mengenal Regular Expression
string teks untuk membuat pola yang membantu mencocokkan (matching), menemukan (searching), dan mengelola tipe data teks
+ dapat mengefisiensi waktu jika kita bekerja dengan teks / perlu mengurai data dalam jumlah besar
+ tidak perlu menuliskan banyak query atau sintaks pengkondisian

--- Pengkondisian Tanpa Regex	
SELECT id_pelanggan, provinsi,
CASE
  WHEN provinsi LIKE '%Jogja%'
         THEN 'Yogyakarta'
  WHEN provinsi LIKE '%Yogya%'
         THEN 'Yogyakarta'
  WHEN provinsi LIKE '%YogYa%'
         THEN 'Yogyakarta'
  ELSE provinsi
END AS provinsi_stdr
FROM master_pelanggan;	

--- Pengkondisian Dengan Regex
SELECT id_pelanggan, provinsi,
CASE
   WHEN provinsi
         REGEXP_LIKE( '(.*)[ Yy | Jj ] og [ Yy | Jj ](.*) ')
   THEN 'Yogyakarta'
   ELSE provinsi
END AS provinsi_stdr
FROM cust_city;

akan menghasilkan kolom baru bernama provinsi_stdr (kolom hasil penyeragaman nama provinsi)
+---------------+---------------+---------------+
| id_pelanggan  | provinsi      | provinsi_stdr |
+---------------+---------------+---------------+
|   CUST1241    | Yogyakarta    |  Yogyakarta   |
|   CUST1109    | Jogja         |  Yogyakarta   |
|   CUST1994    | Jogjakarta    |  Yogyakarta   |
|   CUST2457    | YogYa         |  Yogyakarta   |
|   CUST3011    | D.I Yogyakarta|  Yogyakarta   |
+---------------+---------------+---------------+

---  Notasi Regular Expression
menyediakan beberapa karakter spesial yang dapat digunakan untuk mencocokan karakter dengan pola – pola tertentu
bersifat case sensitive (huruf kecil dan huruf besar diartikan berbeda)

Wildcard (.)
Mencocokkan satu karakter apapun kecuali newline (enter)
Regex (pa.i) akan sesuai dengan padi , paTi, pa9i, dsb.

Optionality (?)
Karakter sebelum tanda (?) bersifat opsional (boleh terdapat pada teks, boleh juga tidak ada)
Regex (Bid?jak) akan sesuai dengan Bidjak atau Bijak (karakter d bersifat opsional)

Repeatability (+)
Pengulangan karakter dengan syarat karakter sebelum notasi + wajib ada
Regex (go+L) akan sesuai dengan goL, goooL, dsb

Repeatability(*)
Pengulangan karakter dengan syarat karakter sebelum notasi * bersifat opsional
Regex (go*L) akan sesuai dengan goL, gooooL, gLadi, gLamour, dsb

Choice / set of characters  ([ ])
Menemukan pola kata yang cocok akan terbatas pada regex yang akan diberi kan didalam simbol tersebut
Regex (mak[Ai]n) hanya akan sesuai dengan teks makAn atau makin saja (pilihannya hanya A atau i)

Range (-)
Menunjukkan suatu rentang tertentu semisal [a-z], [A-Z], [a-zA-Z], [0-9], [0-9a-zA-Z],   [b-e], dsb
Regex ([b-d]uka) akan sesuai dengan teks buka, cuka dan duka

Complement (^)
Menunjukkan negasi atau makna sebaliknya. Notasi biasa diikuti choice ([^…])
Regex (^[aiueo]) akan sesuai dengan karakter konsonan atau non vocal

Prefix (^)
Mencocokan awalan karakter dan harus diletakkan sebelum karakter pencocokan
Regex (^ayam) akan sesuai dengan teks ayam goreng, ayam bakar, dsb

Sufix ($)
Mencocokan akhiran karakter dan harus diletakkan sebelum karakter pencocokan
Regex (ayam$) akan sesuai dengan kari ayam, rendang ayam, dsb

Quantifier ({ })
Menentukan berapa banyakkarakter, grup, atau kelas karakter yang harus ada dalam input agar kecocokan dapat ditemukan
Regex (he.{2}o) akan sesuai dengan hello, herro, heLio, dsb (karakter yang diapit oleh he dan o harus tepat 2 karakter)
